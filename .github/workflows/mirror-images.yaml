name: Mirror Container Images

on:
  # Depends on successful validation workflow completion
  workflow_run:
    workflows: ["Validate Configuration"]
    types:
      - completed
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Optional: Specific image to mirror (e.g., nginx). Leave blank to mirror all.'
        required: false
        default: ''
  # Runs on a schedule (e.g., every Monday at 3:00 AM UTC)
  schedule:
    - cron: '0 3 * * 1'

jobs:
  # Check if we should proceed based on validation success
  check-validation:
    name: Check Validation Status
    runs-on: ubuntu-latest
    # Only run this check if triggered by workflow_run
    if: github.event_name == 'workflow_run'
    outputs:
      should_proceed: ${{ steps.check.outputs.should_proceed }}
    steps:
      - name: Check validation workflow result
        id: check
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
            echo "should_proceed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Validation workflow completed successfully, proceeding with image mirroring"
          else
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Validation workflow failed, skipping image mirroring"
          fi

  prepare-matrix:
    name: Prepare Matrix
    # Skip validation check for manual runs and scheduled runs
    needs: check-validation
    if: always() && (github.event_name != 'workflow_run' || needs.check-validation.outputs.should_proceed == 'true')
    uses: ./.github/workflows/generate-matrix.yml
    with:
      config-type: 'images'
      config-file: './configs/images.yaml'
      target-filter: ${{ github.event.inputs.image_name || '' }}

  mirror:
    name: Mirror ${{ matrix.image.name }}:${{ matrix.image.version }}
    needs: prepare-matrix
    # Only run the job if the matrix is not empty
    if: needs.prepare-matrix.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host

      - name: Generate cache key
        id: cache_key
        run: |
          # Create a cache key based on image name and version
          IMAGE_CACHE_KEY="${{ matrix.image.name }}-${{ matrix.image.version }}"
          # Replace invalid characters for cache key
          IMAGE_CACHE_KEY=$(echo "$IMAGE_CACHE_KEY" | sed 's/[\/:<>|*?"\\[:cntrl:]]/-/g')
          echo "image_cache_key=${IMAGE_CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "üì¶ Cache key: ${IMAGE_CACHE_KEY}"

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ steps.cache_key.outputs.image_cache_key }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ steps.cache_key.outputs.image_cache_key }}-
            buildx-

      - name: Define Image Names
        id: image_names
        run: |
          SOURCE_IMAGE="${{ matrix.image.source_registry }}/${{ matrix.image.name }}:${{ matrix.image.version }}"
          DESTINATION_IMAGE="ghcr.io/scalevector-io/${{ matrix.image.name }}:${{ matrix.image.version }}"
          
          echo "source_image=${SOURCE_IMAGE}" >> $GITHUB_OUTPUT
          echo "destination_image=${DESTINATION_IMAGE}" >> $GITHUB_OUTPUT

      - name: Create Multi-Platform Manifest
        run: |
          SOURCE_IMAGE="${{ steps.image_names.outputs.source_image }}"
          DESTINATION_IMAGE="${{ steps.image_names.outputs.destination_image }}"
          
          echo "--> Creating multi-platform manifest for ${DESTINATION_IMAGE}"
          echo "    Source: ${SOURCE_IMAGE}"
          echo "    Platforms: ${{ join(matrix.image.platforms, ', ') }}"
          echo "    Cache key: ${{ steps.cache_key.outputs.image_cache_key }}"
          
          # Configure buildx to use cache
          docker buildx create --use --name cached-builder --driver docker-container --driver-opt network=host || true
          
          # Pull source image with caching
          echo "--> Pulling source image with layer caching..."
          docker buildx imagetools inspect ${SOURCE_IMAGE}
          
          # Use buildx imagetools to create multi-platform manifest with caching
          docker buildx imagetools create \
            --tag ${DESTINATION_IMAGE} \
            ${SOURCE_IMAGE}
          
          echo "--> Successfully created multi-platform image: ${DESTINATION_IMAGE}"
          
          # Export cache for future runs
          echo "--> Exporting cache for future runs..."
          docker buildx du --verbose || true

      - name: Cache Trivy database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ hashFiles('**/go.sum') }}-${{ github.run_number }}
          restore-keys: |
            trivy-db-${{ hashFiles('**/go.sum') }}-
            trivy-db-

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image_names.outputs.destination_image }}
          format: 'table'
          exit-code: '0' # Don't fail the job on vulnerabilities
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Generate vulnerability summary
        if: always()
        run: |
          IMAGE_NAME="${{ matrix.image.name }}:${{ matrix.image.version }}"
          echo "## üîç Security Scan Results for ${IMAGE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Note: Detailed scan results are available in the previous step logs and artifacts
          echo "üìã **Security scan completed for ${IMAGE_NAME}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ **Where to find results:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Console logs**: Check the 'Scan image for vulnerabilities' step above" >> $GITHUB_STEP_SUMMARY
          echo "- **Detailed reports**: Download artifacts from this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Generate additional vulnerability reports
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          image-ref: ${{ steps.image_names.outputs.destination_image }}
          format: 'json'
          output: 'trivy-report.json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Create formatted vulnerability report
        if: always()
        id: artifact_name
        run: |
          # Create a detailed vulnerability report
          IMAGE_NAME="${{ matrix.image.name }}:${{ matrix.image.version }}"
          REPORT_FILE="vulnerability-report-$(echo "${{ matrix.image.name }}-${{ matrix.image.version }}" | sed 's/[\/:<>|*?"\\[:cntrl:]]/-/g').txt"
          
          echo "# Vulnerability Report for ${IMAGE_NAME}" > ${REPORT_FILE}
          echo "Generated: $(date -u)" >> ${REPORT_FILE}
          echo "Mirror URL: ghcr.io/scalevector-io/${{ matrix.image.name }}:${{ matrix.image.version }}" >> ${REPORT_FILE}
          echo "" >> ${REPORT_FILE}
          
          # Parse JSON report and create summary
          if [ -f "trivy-report.json" ]; then
            # Count vulnerabilities by severity using jq
            CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-report.json 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-report.json 2>/dev/null || echo "0")
            MEDIUM_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-report.json 2>/dev/null || echo "0")
            
            # Ensure counts are valid numbers
            CRITICAL_COUNT=${CRITICAL_COUNT:-0}
            HIGH_COUNT=${HIGH_COUNT:-0}
            MEDIUM_COUNT=${MEDIUM_COUNT:-0}
            
            echo "VULNERABILITY SUMMARY:" >> ${REPORT_FILE}
            echo "Critical: ${CRITICAL_COUNT}" >> ${REPORT_FILE}
            echo "High: ${HIGH_COUNT}" >> ${REPORT_FILE}
            echo "Medium: ${MEDIUM_COUNT}" >> ${REPORT_FILE}
            echo "" >> ${REPORT_FILE}
            
            # Add GitHub annotations for significant vulnerabilities
            if [ "${CRITICAL_COUNT}" -gt 0 ] 2>/dev/null; then
              echo "::warning title=Security Alert::${IMAGE_NAME} contains ${CRITICAL_COUNT} CRITICAL vulnerabilities"
            fi
            
            if [ "${HIGH_COUNT}" -gt 0 ] 2>/dev/null; then
              echo "::warning title=Security Alert::${IMAGE_NAME} contains ${HIGH_COUNT} HIGH vulnerabilities"
            fi
            
            echo "See trivy-report.json for detailed vulnerability information." >> ${REPORT_FILE}
          else
            echo "Trivy scan output not available." >> ${REPORT_FILE}
          fi
          
          # Set output for artifact upload
          SANITIZED_NAME=$(echo "vulnerability-report-${{ matrix.image.name }}-${{ matrix.image.version }}" | sed 's/[\/:<>|*?"\\[:cntrl:]]/-/g')
          echo "sanitized_name=$SANITIZED_NAME" >> $GITHUB_OUTPUT
          echo "report_file=$REPORT_FILE" >> $GITHUB_OUTPUT

      - name: Upload vulnerability reports as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ steps.artifact_name.outputs.sanitized_name }}
          path: |
            ${{ steps.artifact_name.outputs.report_file }}
            trivy-report.json
          retention-days: 30

      - name: Cache cleanup and optimization
        if: always()
        run: |
          echo "--> Cache cleanup and optimization"
          
          # Display cache usage information
          echo "üìä Docker system disk usage:"
          docker system df
          
          # Clean up unused Docker resources (but keep cache)
          echo "üßπ Cleaning up unused Docker resources..."
          docker system prune -f --volumes || true
          
          # Display buildx cache info
          echo "üì¶ Buildx cache information:"
          docker buildx du --verbose || true
          
          # Display final disk usage
          echo "üíæ Final disk usage:"
          df -h